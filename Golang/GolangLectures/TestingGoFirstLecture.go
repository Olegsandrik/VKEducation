package main

import (
	"fmt"
	"unicode/utf8"
)

type UserId int
type AllUsers map[UserId]User
type User struct {
	UserName    string // Public –ø–æ–ª—è, –µ—Å–ª–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π, —Ç–æ —ç—Ç–æ private
	UserAddress string
	UserAge     int
}

const ( // –ö—Ä–æ–º–µ –ì–æ—à–∫–∏ –Ω–∏–≥–¥–µ —Ç–∞–∫–æ–π –∫—Ä–∞—Å–æ—Ç—ã –Ω–µ—Ç
	ziro = iota
	_    // Underscore - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –¥–µ–±–∞–≥–µ
	two
	tree
)

const ( // –ù–µ —Ç–æ–ª—å–∫–æ –∏–Ω–∫—Ä–∏–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ª—é–±—É—é —É–¥–æ–±–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
	start = iota
	first = iota * 10
	second
	third
)

func SuperFunc(shrek []string) {
	shrek[0] = "You change this bro"
	fmt.Printf("MyStr = %v –≤–Ω—É—Ç—Ä–∏ SuperFunc\n", shrek)

}

func NotSuperFunc(shrek []string) {
	shrek = append(shrek, "Is it!?")
	fmt.Printf("MyStr = %v –≤–Ω—É—Ç—Ä–∏ NotSuperFunc\n", shrek)
}

func GigaSuperFunc(shrek *[]string) {
	*shrek = append(*shrek, "It's work honey")
	fmt.Printf("MyStr = %v –≤–Ω—É—Ç—Ä–∏ GigaSuperFunc\n", *shrek)
}

func main() {
	fmt.Print("–ü–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏!\n")

	FastPeremen := "1234" // –ë—ã—Å—Ç—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

	var array [10]int // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞, –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∫–æ–≤—ã–µ => –Ω—É–ª–µ–≤—ã–µ –≤ —Å–ª—É—á–∞–µ int
	_ = array[0]      // –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ 0–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞
	// _ = array[11]     // Panic

	// –°–ª–∞–π—Å—ã = –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–∞—Å—Å–∏–≤—ã
	slice := make([]int, 10, 20)
	// len = 10, capacity = 20. –ü–µ—Ä–≤—ã–µ 10 —ç–ª-—Ç–æ–≤ 0, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ 10 –±–µ–∑ –∞–ª–ª–æ—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
	slice = append(slice, 12, 19, 228)                                                     // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
	fmt.Printf("–≠–ª–µ–º–µ–Ω—Ç—ã —Å–ª–∞–π—Å–∞ %d %d %d %d\n", slice[1], slice[10], slice[11], slice[12]) // 0, 12, 19, 228

	fmt.Printf("–ú–∞—Å—Å–∏–≤—ã –ø—Ä–∞–≤—è—Ç –º–∏—Ä–æ–º %v\n", array)
	// –†–∏—Å—É–µ—Ç –≤–µ—Å—å –º–∞—Å—Å–∏–≤ [0 0 0 0 0 0 0 0 0 0]
	fmt.Printf("–ú–∞—Å—Å–∏–≤—ã –ø—Ä–∞–≤—è—Ç –º–∏—Ä–æ–º %#v\n", array)
	// –†–∏—Å—É–µ—Ç –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –∏ –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–º –º–∞—Å—Å–∏–≤–µ [10]int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	fmt.Print("–ü–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å–æ —Å–∫–∞–Ω–æ–º!\n")

	var ScamInt int
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ")
	_, err := fmt.Scanf("%d", &ScamInt)
	if err != nil {
		fmt.Print("Error")
		return
	}

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–æ—á–∫—É")
	var ScamStr string
	_, err = fmt.Scanf("%s", &ScamStr)
	if err != nil {
		fmt.Print("Error")
		return
	}

	fmt.Printf("–í–∞—à–µ —á–∏—Å–ª–æ: %d, –≤–∞—à–∞ —Å—Ç—Ä–æ—á–∫–∞: %s, –±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: %s\n", int64(ScamInt), ScamStr, FastPeremen)
	// ScamInt –ø—Ä–∏–≤–æ–¥–∏–º —Ä—É–∫–∞–º–∏ –∫ —Ç–∏–ø—É int64

	fmt.Println("–†–∞–±–æ—Ç–∞ —Å iota ‚Ññ1: ", ziro, two, tree)             // 0 2 3
	fmt.Println("–†–∞–±–æ—Ç–∞ —Å iota ‚Ññ2: ", start, first, second, third) // 0 10 20 30

	fmt.Print("–ü–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n")
	MyStr := []string{"1234"}
	fmt.Printf("MyStr = %v –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ\n", MyStr)
	SuperFunc(MyStr)
	fmt.Printf("MyStr = %v –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å SuperFunc\n", MyStr)
	NotSuperFunc(MyStr)
	fmt.Printf("MyStr = %v –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å NotSuperFunc\n", MyStr)
	GigaSuperFunc(&MyStr)
	fmt.Printf("MyStr = %v –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å GigaSuperFunc\n", MyStr)

	fmt.Print("–ü–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ—á–∫–∞–º–∏!\n")
	var MyRune rune = 'Ëå∂' // –û–Ω–∞ uint32 –¥–ª—è UTF-8 —Å–∏–º–≤–æ–ª–æ–≤
	fmt.Printf("–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É—é—Ç —Ä—É–Ω—ã –∏–∑ –∫–æ—Ä–æ–±–∫–∏ %#U\n", MyRune)
	// –°—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ, –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —ç—Ç–æ —Ä—É–Ω–∞.
	SymbolsInFastPerem := utf8.RuneCountInString(FastPeremen) // –ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ—á–∫–µ FastPerem - 4
	fmt.Println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ FastPerem ", SymbolsInFastPerem)
	fmt.Print("–ü–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å HashMap!\n")
	Users := map[int]string{} // –°–æ–∑–¥–∞–µ–º –•–µ—à-—Ç–∞–±–ª–∏—á–∫—É —Å –ø–∞—Ä–æ–π –∫–ª—é—á-int –∑–Ω–∞—á–µ–Ω–∏–µ-string
	Users[1] = "Alex"         // –î–æ–±–∞–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º 1
	fmt.Printf("–ó–Ω–∞—á–µ–Ω–∏–µ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª—é—á–æ–º 1: %s –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –Ω–µ–π: %d\n", Users[1], len(Users))
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
	_, mNameExist := Users[2]
	fmt.Println("mNameExist:", mNameExist)
	// —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ (clear —É–¥–∞–ª–∏—Ç –≤–æ–æ–±—â–µ –≤—Å–µ)
	delete(Users, 1)
	fmt.Printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–µ: %d\n", len(Users))

	// –£–∫–∞–∑–∞—Ç–µ–ª–∏
	a := 2
	b := &a // –°–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å –∞, —Ç–æ –µ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
	*b = 3  // –°–¥–µ–ª–∞–µ—Ç a = 3
	c := &a // –ù–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é a

	// –ø–æ–ª—É—á–µ–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—Ç —Ç–∏–ø–∞ int
	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
	d := new(int) // –Ω–∞ 0 —É–∫–∞–∑—ã–≤–∞–µ—Ç
	*d = 12
	*c = *d // c = 12 -> a = 12
	*d = 13 // c –∏ a –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å

	c = d   // —Ç–µ–ø–µ—Ä—å —Å —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É–¥–∞ –∂–µ, –∫—É–¥–∞ d
	*c = 14 // —Å = 14 -> d = 14, a = 12

	// –ø—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ
	boolVal := true
	if boolVal {
		fmt.Println("boolVal is true")
	}

	// –ú–∞–ø–∫–∏ –±–µ–∑ –ø–æ—Ä—è–¥–∫–∞!
	mapVal := map[string]string{"name": "rvasily"}
	// –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫ —Å—É—â–µ—Å—Ç–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
	if _, keyExist := mapVal["name"]; keyExist {
		fmt.Println("key 'name' exist")
	}

	// switch –ø–æ 1 –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
	strVal := "name"
	switch strVal {
	case "name":
		fallthrough // –ü—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π case. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø–æ—Å–ª–µ case –≤—ã—Ö–æ–¥ –∏–∑ switch
	case "test", "lastName":
		// some work
	default:
		// some work
	}

	str := "–ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä! üí©"
	for pos, char := range str {
		fmt.Printf("%#U at pos %d\n", char, pos)
	}

	fmt.Println("–ü–æ—à–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å defer!")
	defer fmt.Println("After work") // <- –°—Ç–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
	defer func() {
		fmt.Println(getSomeVars())
	}()
	fmt.Println("Some userful work\n")

	// recover –ø–æ–º–æ–≥–∞–µ—Ç —Å–ø–∞—Å—Ç–∏—Å—å –æ—Ç panic

	MyUser := User{UserName: "Alex", UserAddress: "Moscow", UserAge: 19}
	fmt.Printf("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %v\n", MyUser)
	MyUser.SetName("Nikita")
	fmt.Printf("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—Å–µ SetName: %v\n", MyUser)
	MyUser.UpdateName("Danila")
	fmt.Printf("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—Å–µ UpdateName: %v\n", MyUser)

}

// –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, last —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
func multipleReturn(in int) (int, error) {
	if in > 2 {
		return 0, fmt.Errorf("some error happend")
	}
	return in, nil
}

// –ú–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func multIn(a, b int, c int) int {
	return a + b + c
}

// –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func sum(in ...int) (result int) {
	for _, val := range in {
		result += val
	}
	return
}

func getSomeVars() string {
	fmt.Println("getSomeVars execution")
	return "getSomeVars result"
}

func SumAges(p1, p2 User) int { // –ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—É–º–º—É –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	return p1.UserAge + p2.UserAge
}

// –Ω–µ –∏–∑–º–µ–Ω–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–Ω
func (p User) UpdateName(name string) {
	p.UserName = name
}

// –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
func (p *User) SetName(name string) {
	p.UserName = name // –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å–∞–º –≤—Å–µ –ø–æ–Ω–∏–º–∞–µ—Ç
}
